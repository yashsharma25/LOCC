
==============================
PROJECT HANDOFF / DEVELOPER NOTES
==============================

1. PROJECT OVERVIEW
-------------------
Name: LOCC MANIM PROJECT
Purpose: An interactive software to visualize LOCC protocols
Current Status: Main backend / routing of the application is complete, and the MANIM visualization has been started but needs a lot of cleaning up.
Tech Stack:
  - Frontend: PyQt5
  - Backend: Python
  - Database:
  - Other tools/APIs: Qiskit, MANIM, Numpy, etc. (see environment.yml file)

2. REPOSITORY STRUCTURE
-----------------------
locc_app
    ├── controller
    │   ├── __init__.py
    │   └── app_controller.py
    ├── developer_handoff.txt
    ├── environment.yml
    ├── main.py
    ├── media
    │   ├── ... --> where compiled MANIM videos will be saved
    ├── model --> core qiskit / locc protocol logic related scripts
    │   ├── __init__.py
    │   ├── entanglement_measures.py
    │   ├── k_party.py
    │   ├── locc_controller.py
    │   ├── locc_operation.py
    │   ├── locc_teleportation.py
    │   ├── quantum_model.py
    │   └── video_model.py
    ├── README.md
    ├── requirements.txt
    ├── tests
    │   ├── __init__.py
    │   └── teleportation_template.txt --> teleporation example to see how to input into data into application
    └── view
        ├── __init__.py
        └── main_window.py --> all frontend / UI is written here

3. SETUP INSTRUCTIONS
---------------------
Clone repo: git clone https://github.com/yashsharma25/LOCC.git cd locc_app
Environment variables: environment.yml
Installation:
conda env create -f environment.yml
conda activate manim_env
Running locally: python main.py
Other notes:

4. CURRENT FUNCTIONALITY
------------------------
- [ ] Feature 1 — user can properly input data into application and have data properly encapsulated within the application to generate MANIM video
- [ ] Feature 2 — 

5. INCOMPLETE WORK / TODOs
--------------------------
- [ ] Feature X — MANIM video script is very much incomplete.
- [ ] Feature Y — 
Known bugs:

6. DESIGN & ARCHITECTURE
------------------------
Data Flow: Model View Controller (MVC) software architecture
Key Decisions:
Dependencies: see environment.yml

7. DEVELOPMENT NOTES
--------------------
- 
- 
- 

8. NEXT STEPS
-------------
1. Define, for any given LOCC protocol, what the MANIM video should look like
2. After this, implement manim video script: /locc_app/model/video_model.py
3. Error proof the entire application (i.e., there are a lot of places where the application assumes the user is entering all the input as expected-- need to account for improper use of application)

9. CONTACT / CREDITS
--------------------
Name: Senuri Rupasinghe
Role: Lead Software Developer
Email/Slack: senuri.rupasinghe@rutgers.edus
